import FormData from "form-data";
import { ProtocolEnum } from "./spheron-api/enums";
import { PinStatus } from "./spheron-api/interfaces";
export interface UploadMangerConfiguration {
    token: string;
}
export interface UploadConfiguration {
    protocol: ProtocolEnum;
    name: string;
    organizationId?: string;
    onUploadInitiated?: (uploadId: string) => void;
    onChunkUploaded?: (uploadedSize: number) => void;
}
export interface UploadResult {
    uploadId: string;
    bucketId: string;
    protocolLink: string;
    dynamicLinks: string[];
    cid?: string;
}
declare class UploadManager {
    private readonly spheronApiUrl;
    initiateDeployment(configuration: {
        protocol: ProtocolEnum;
        name: string;
        organizationId?: string;
        token: string;
        createSingleDeploymentToken?: boolean;
    }): Promise<{
        deploymentId: string;
        parallelUploadCount: number;
        payloadSize: number;
        singleDeploymentToken?: string;
    }>;
    pinCID(configuration: {
        name: string;
        organizationId?: string;
        token: string;
        cid: string;
    }): Promise<{
        deploymentId: string;
        projectId: string;
        sitePreview: string;
        affectedDomains: string[];
    }>;
    getCIDStatus(CID: string): Promise<{
        pinStatus: PinStatus;
    }>;
    uploadPayloads(payloads: FormData[], configuration: {
        deploymentId: string;
        token: string;
        parallelUploadCount: number;
        onChunkUploaded?: (uploadedSize: number) => void;
    }): Promise<{
        success: boolean;
        errorMessage: string;
    }>;
    finalizeUploadDeployment(deploymentId: string, upload: boolean, token: string): Promise<{
        success: boolean;
        message: string;
        deploymentId: string;
        projectId: string;
        sitePreview: string;
        affectedDomains: string[];
        cid: string;
    }>;
    private validateUploadConfiguration;
    private getAxiosRequestConfig;
}
export { UploadManager };
